@using MUnique.OpenMU.Web.AdminPanel.Services

@implements IDisposable

@inject NavigationHistory History;

<div class="btn-group" role="group" aria-label="Navigation arrows">
  @if (this.History.CanGoBackward)
  {
    <button class="btn btn-sm btn-outline-secondary"
      aria-disabled="False"
      title="Previous"
      aria-label="Previous"
      @onclick="() => this.History.GoBackward()">
      <span class="oi oi-arrow-circle-left"></span>
    </button>
  }
  else
  {
    <button class="btn btn-sm btn-outline-secondary"
            aria-disabled="True"
            title="Previous"
            aria-label="Previous"
            disabled>
      <span class="oi oi-arrow-circle-left"></span>
    </button>
  }

  @if (this.History.CanGoForward)
  {
    <button class="btn btn-sm btn-outline-secondary"
          aria-disabled="False"
          title="Next"
          aria-label="Next"
          @onclick="() => this.History.GoForward()">
      <span class="oi oi-arrow-circle-right"></span>
    </button>
  }
  else
  {
    <button class="btn btn-sm btn-outline-secondary"
            aria-disabled="True"
            title="Next"
            aria-label="Next"
            disabled>
      <span class="oi oi-arrow-circle-right"></span>
    </button>
  }
</div>
<nav aria-label="breadcrumb" class="breadcrumb-nav">
  <ol class="breadcrumb">

  @foreach (var item in this.History.Previous)
  {
    <li class="breadcrumb-item">
    <a href="#" @onclick="() => this.History.JumpTo(item)">@item.Title</a>
    </li>
  }
  <li class="breadcrumb-item active" aria-current="page">@this.History.Current?.Title</li>
  
  @foreach (var item in this.History.Next)
  {
    <li class="breadcrumb-item">
      <a href="#" @onclick="() => this.History.JumpTo(item)">@item.Title</a>
    </li>
  }
  </ol>
</nav>

@code {

  public void Dispose()
  {
    this.History.HistoryChanged -= this.OnHistoryChanged;
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    this.History.HistoryChanged -= this.OnHistoryChanged;
    this.History.HistoryChanged += this.OnHistoryChanged;
  }

  private void OnHistoryChanged(object? sender, EventArgs e)
  {
    this.StateHasChanged();
  }

}
