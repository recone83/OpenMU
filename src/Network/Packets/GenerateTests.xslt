<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl"
    xmlns:pd="http://www.munique.net/OpenMU/PacketDefinitions"
>
  <xsl:param name="resultFileName" />
  <xsl:param name="subNamespace" />
  <xsl:output method="text" indent="yes" />
  <xsl:include href="Common.xslt" />

  <xsl:template match="pd:PacketDefinitions">
    <xsl:text>// &lt;copyright file="</xsl:text><xsl:value-of select="$resultFileName"/><xsl:text>" company="MUnique"&gt;
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// &lt;/copyright&gt;

//------------------------------------------------------------------------------
// &lt;auto-generated&gt;
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (rebuild this project).
// &lt;/auto-generated&gt;
//------------------------------------------------------------------------------

namespace MUnique.OpenMU.Network.Packets.Tests</xsl:text>
    <xsl:if test="$subNamespace">
      <xsl:text>.</xsl:text>
      <xsl:value-of select="$subNamespace"/>
    </xsl:if>
    <xsl:text>;</xsl:text>
<xsl:text>

using System;
using System.Text;
using NUnit.Framework;
using MUnique.OpenMU.Network.Packets</xsl:text>
    <xsl:if test="$subNamespace">
      <xsl:text>.</xsl:text>
      <xsl:value-of select="$subNamespace"/>
    </xsl:if>
    <xsl:text>;</xsl:text>
<xsl:text>

/// &lt;summary&gt;
/// Auto-generated tests for packet structures to validate packet definitions.
/// &lt;/summary&gt;
[TestFixture]
public class PacketStructureTests
{</xsl:text>
    <xsl:apply-templates select="pd:Structures/pd:Structure" />
    <xsl:apply-templates select="pd:Packets/pd:Packet" />
<xsl:text>
}
</xsl:text>
  </xsl:template>

  <!-- Generate tests for structures -->
  <xsl:template match="pd:Structure">
    <xsl:variable name="structName" select="pd:Name" />
    <xsl:variable name="hasLength" select="pd:Length" />
    <xsl:variable name="hasVariableFields" select="pd:Fields/pd:Field[not(pd:Length) and (pd:Type='Binary' or pd:Type='String')]" />
    
    <xsl:text>

    /// &lt;summary&gt;
    /// Tests the structure size calculation for </xsl:text>
    <xsl:apply-templates select="pd:Name"/>
    <xsl:text>.
    /// &lt;/summary&gt;
    [Test]
    public void </xsl:text>
    <xsl:apply-templates select="pd:Name"/>
    <xsl:text>_SizeValidation()
    {</xsl:text>
    
    <xsl:choose>
      <xsl:when test="$hasLength and not($hasVariableFields)">
        <!-- Fixed-length structure - validate that declared length matches calculated size -->
        <xsl:text>
        // Fixed-length structure validation
        const int expectedLength = </xsl:text>
        <xsl:value-of select="pd:Length"/>
        <xsl:text>;
        var actualLength = </xsl:text>
        <xsl:apply-templates select="pd:Name"/>
        <xsl:text>.Length;
        
        Assert.That(actualLength, Is.EqualTo(expectedLength), 
            "Structure length mismatch: declared length does not match calculated size");</xsl:text>
        
        <!-- Validate field boundaries -->
        <xsl:for-each select="pd:Fields/pd:Field">
          <xsl:variable name="fieldSize">
            <xsl:call-template name="GetFieldSize">
              <xsl:with-param name="fieldType" select="pd:Type" />
              <xsl:with-param name="fieldLength" select="pd:Length" />
            </xsl:call-template>
          </xsl:variable>
          <xsl:if test="$fieldSize != ''">
            <xsl:text>
        
        // Validate field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' boundary
        Assert.That(</xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text> + </xsl:text>
            <xsl:value-of select="$fieldSize"/>
            <xsl:text>, Is.LessThanOrEqualTo(expectedLength), 
            "Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' exceeds structure boundary");</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:when>
      
      <xsl:when test="$hasVariableFields">
        <!-- Variable-length structure - test GetRequiredSize method -->
        <xsl:text>
        // Variable-length structure validation
        // Test GetRequiredSize method with sample data</xsl:text>
        
        <xsl:for-each select="pd:Fields/pd:Field[not(pd:Length) and (pd:Type='Binary' or pd:Type='String')]">
          <xsl:choose>
            <xsl:when test="pd:Type='String'">
              <xsl:text>
        const string testString = "TestData";
        var calculatedSize = </xsl:text>
              <xsl:value-of select="$structName"/>
              <xsl:text>.GetRequiredSize(testString);
        var expectedSize = Encoding.UTF8.GetByteCount(testString) + 1 + </xsl:text>
              <xsl:value-of select="pd:Index"/>
              <xsl:text>;
        
        Assert.That(calculatedSize, Is.EqualTo(expectedSize), 
            "GetRequiredSize calculation incorrect for string field");</xsl:text>
            </xsl:when>
            <xsl:when test="pd:Type='Binary'">
              <xsl:text>
        const int testBinaryLength = 10;
        var calculatedSize = </xsl:text>
              <xsl:value-of select="$structName"/>
              <xsl:text>.GetRequiredSize(testBinaryLength);
        var expectedSize = testBinaryLength + </xsl:text>
              <xsl:value-of select="pd:Index"/>
              <xsl:text>;
        
        Assert.That(calculatedSize, Is.EqualTo(expectedSize), 
            "GetRequiredSize calculation incorrect for binary field");</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:for-each>
      </xsl:when>
      
      <xsl:otherwise>
        <!-- Structure without explicit length or variable fields - basic validation -->
        <xsl:text>
        // Basic structure validation
        // Validate field boundaries don't overlap</xsl:text>
        <xsl:for-each select="pd:Fields/pd:Field">
          <xsl:variable name="fieldSize">
            <xsl:call-template name="GetFieldSize">
              <xsl:with-param name="fieldType" select="pd:Type" />
              <xsl:with-param name="fieldLength" select="pd:Length" />
            </xsl:call-template>
          </xsl:variable>
          <xsl:if test="$fieldSize != ''">
            <xsl:text>
        
        // Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' starts at index </xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text> with size </xsl:text>
            <xsl:value-of select="$fieldSize"/>
            <xsl:text>
        Assert.That(</xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text>, Is.GreaterThanOrEqualTo(0), 
            "Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' has invalid negative index");</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
    
    <xsl:text>
    }</xsl:text>
  </xsl:template>

  <!-- Generate tests for packets -->
  <xsl:template match="pd:Packet">
    <xsl:variable name="packetName" select="pd:Name" />
    <xsl:variable name="hasLength" select="pd:Length" />
    <xsl:variable name="hasVariableFields" select="pd:Fields/pd:Field[not(pd:Length) and (pd:Type='Binary' or pd:Type='String')]" />
    
    <xsl:text>

    /// &lt;summary&gt;
    /// Tests the packet size calculation for </xsl:text>
    <xsl:apply-templates select="pd:Name"/>
    <xsl:text>.
    /// &lt;/summary&gt;
    [Test]
    public void </xsl:text>
    <xsl:apply-templates select="pd:Name"/>
    <xsl:text>_PacketSizeValidation()
    {</xsl:text>
    
    <xsl:choose>
      <xsl:when test="$hasLength and not($hasVariableFields)">
        <!-- Fixed-length packet validation -->
        <xsl:text>
        // Fixed-length packet validation
        const int expectedLength = </xsl:text>
        <xsl:value-of select="pd:Length"/>
        <xsl:text>;
        var actualLength = </xsl:text>
        <xsl:apply-templates select="pd:Name"/>
        <xsl:text>Ref.Length;
        
        Assert.That(actualLength, Is.EqualTo(expectedLength), 
            "Packet length mismatch: declared length does not match calculated size");</xsl:text>
        
        <!-- Validate field boundaries -->
        <xsl:for-each select="pd:Fields/pd:Field">
          <xsl:variable name="fieldSize">
            <xsl:call-template name="GetFieldSize">
              <xsl:with-param name="fieldType" select="pd:Type" />
              <xsl:with-param name="fieldLength" select="pd:Length" />
            </xsl:call-template>
          </xsl:variable>
          <xsl:if test="$fieldSize != ''">
            <xsl:text>
        
        // Validate field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' boundary
        Assert.That(</xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text> + </xsl:text>
            <xsl:value-of select="$fieldSize"/>
            <xsl:text>, Is.LessThanOrEqualTo(expectedLength), 
            "Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' exceeds packet boundary");</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:when>
      
      <xsl:when test="$hasVariableFields">
        <!-- Variable-length packet - test GetRequiredSize method -->
        <xsl:text>
        // Variable-length packet validation
        // Test GetRequiredSize method with sample data</xsl:text>
        
        <xsl:for-each select="pd:Fields/pd:Field[not(pd:Length) and (pd:Type='Binary' or pd:Type='String')]">
          <xsl:choose>
            <xsl:when test="pd:Type='String'">
              <xsl:text>
        const string testString = "TestData";
        var calculatedSize = </xsl:text>
              <xsl:value-of select="$packetName"/>
              <xsl:text>Ref.GetRequiredSize(testString);
        var expectedMinSize = Encoding.UTF8.GetByteCount(testString) + 1 + </xsl:text>
              <xsl:value-of select="pd:Index"/>
              <xsl:text>;
        
        Assert.That(calculatedSize, Is.GreaterThanOrEqualTo(expectedMinSize), 
            "GetRequiredSize calculation incorrect for string field");</xsl:text>
            </xsl:when>
            <xsl:when test="pd:Type='Binary'">
              <xsl:text>
        const int testBinaryLength = 10;
        var calculatedSize = </xsl:text>
              <xsl:value-of select="$packetName"/>
              <xsl:text>Ref.GetRequiredSize(testBinaryLength);
        var expectedMinSize = testBinaryLength + </xsl:text>
              <xsl:value-of select="pd:Index"/>
              <xsl:text>;
        
        Assert.That(calculatedSize, Is.GreaterThanOrEqualTo(expectedMinSize), 
            "GetRequiredSize calculation incorrect for binary field");</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:for-each>
      </xsl:when>
      
      <xsl:otherwise>
        <!-- Packet without explicit length validation -->
        <xsl:text>
        // Basic packet validation
        // Validate header type and field boundaries</xsl:text>
        <xsl:for-each select="pd:Fields/pd:Field">
          <xsl:variable name="fieldSize">
            <xsl:call-template name="GetFieldSize">
              <xsl:with-param name="fieldType" select="pd:Type" />
              <xsl:with-param name="fieldLength" select="pd:Length" />
            </xsl:call-template>
          </xsl:variable>
          <xsl:if test="$fieldSize != ''">
            <xsl:text>
        
        // Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' starts at index </xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text> with size </xsl:text>
            <xsl:value-of select="$fieldSize"/>
            <xsl:text>
        Assert.That(</xsl:text>
            <xsl:value-of select="pd:Index"/>
            <xsl:text>, Is.GreaterThanOrEqualTo(0), 
            "Field '</xsl:text>
            <xsl:apply-templates select="pd:Name"/>
            <xsl:text>' has invalid negative index");</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:otherwise>
    </xsl:choose>
    
    <xsl:text>
    }</xsl:text>
  </xsl:template>

  <!-- Helper template to get field size -->
  <xsl:template name="GetFieldSize">
    <xsl:param name="fieldType" />
    <xsl:param name="fieldLength" />
    
    <xsl:choose>
      <xsl:when test="$fieldType = 'Boolean' or $fieldType = 'Byte' or $fieldType = 'Enum'">1</xsl:when>
      <xsl:when test="$fieldType = 'ShortLittleEndian' or $fieldType = 'ShortBigEndian'">2</xsl:when>
      <xsl:when test="$fieldType = 'IntegerLittleEndian' or $fieldType = 'IntegerBigEndian' or $fieldType = 'Float'">4</xsl:when>
      <xsl:when test="$fieldType = 'LongLittleEndian' or $fieldType = 'LongBigEndian' or $fieldType = 'Double'">8</xsl:when>
      <xsl:when test="$fieldType = 'String' or $fieldType = 'Binary'">
        <xsl:if test="$fieldLength">
          <xsl:value-of select="$fieldLength"/>
        </xsl:if>
      </xsl:when>
      <xsl:otherwise></xsl:otherwise>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>